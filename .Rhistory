austenTidyBooks %>%
filter(book == "Persuasion") %>%
inner_join(get_sentiments("nrc")) %>%
summarise(percent = n()/Persuasion_total_words * 100)
help("get_sentiments")
# #count words frequency in sentiment
mynrc <- get_sentiments("nrc")
mynrc_Freq<- as.data.frame(mynrc)  %>%   #as.dataframe
count(sentiment, sort = TRUE) #count words frequency in sentiment
#filer Trust words
austenTidyBooks %>%
filter(book == "Persuasion") %>%
inner_join(nrcTrust) %>%
count(word, sort = TRUE)
#reshape2 package
install.packages("reshape2")
library(reshape2)
library(tidytext)
austenTidyBooks %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
install.packages("reshape2")
library(reshape2)
austenTidyBooks %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
library(tidyverse)
austenTidyBooks %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
library(tidytext)
austenTidyBooks %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
austenTidyBooks %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0)
?Comparison
library(comparison.cloud)
install.packages("comparison.cloud")
library(comparison.cloud)
library(wordcloud)
austenTidyBooks %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
austenTidyBooks %>%
inner_join(get_sentiments("ncr")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
austenTidyBooks %>%
inner_join(get_sentiments("nrc")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
austenTidyBooks %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colours = c("#F8766D", "#00BFC4"), max.word = 100)
austenTDF <- austendTidyBooks %>%
count(book, word, sort = TRUE) %>%
bind_tf_idf(word, book, n) %>%
arrange(desc(tf_idf))
austenTDF <- austendTidyBook %>%
count(book, word, sort = TRUE) %>%
bind_tf_idf(word, book, n) %>%
arrange(desc(tf_idf))
austenTDF <- austenTidyBooks %>%
count(book, word, sort = TRUE) %>%
bind_tf_idf(word, book, n) %>%
arrange(desc(tf_idf))
austenTDF
austenTDFIF <- austenTidyBooks %>%
count(book, word, sort = TRUE) %>%
bind_tf_idf(word, book, n) %>%
arrange(desc(tf_idf))
rm(austenTDF)
austenTDFIF %>%
group_by(book) %>%
top_n(12, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, scales = "free")+
ylab("tf_idf")+
coord_flip()
group_by(book) %>%
top_n(12, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE)
group_by(book) %>%
top_n(12, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = book))
austenTDFIF %>%
group_by(book) %>%
top_n(12, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE)
austenTDFIF %>%
group_by(book) %>%
top_n(12, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, scales = "free")
austenTDFIF %>%
group_by(book) %>%
top_n(12, tf_idf) %>%
ungroup() %>%
mutate(word = reorder(word, tf_idf)) %>%
ggplot(aes(word, tf_idf, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, scales = "free")+
ylab("tf_idf")+
coord_flip()
save.image("~/Desktop/Learning R/text_mining.RData")
library(tidyverse)
library(readr)
nlsaa<-read_csv("NLSAA.csv")
shapiro.test(nlsaa$lsi_85)
shapiro.test(nlsaa$lsi_85)
#try asleep in 1993
shapiro.test(nlsaa$tmasl_93)
# Q-Q test to check how far from the normal distribution
qqnorm(nlsaa$lsi01_85)
qqline(nlsaa$lsi01_85)
qqline(nlsaa$lsi01_85)
qqnorm(nlsaa$lsi01_85)
qqnorm(nlsaa$tmasl_93)
qqline(nlsaa$tmasl_93)
qqnorm(nlsaa$tmasl_93)
qqline(nlsaa$tmasl_93)
t.test(nlsaa$rgrp4_93, mu = 28)
t.test(nlsaa$ivdur_89, nlsaa$ivdur_93)
nlsaa %>%
t.test(ivdur_89, ivdur_93, paired = TRUE) #using parameter paired = TRUE
nlsaa %>%
t.test(ivdur_89, ivdur_93, paired = TRUE)
library(tidyverse)
library(readr)
nlsaa %>%
t.test(ivdur_89, ivdur_93, paired = TRUE)
nlsaa %>%
t.test(ivdur_89, ivdur_93, paired = TRUE)
nlsaa %>%
#using parameter paired = TRUE
t.test(nlsaa$ivdur_89, nlsaa$ivdur_93, paired = TRUE)
nlsaa %>%
#using parameter paired = TRUE
t.test(nlsaa$ivdur_89, nlsaa$ivdur_93, paired = TRUE)
t.test(nlsaa$ivdur_89, nlsaa$ivdur_93)
nlsaa %>%
t.test(ivdur_89, ivdur_93, paired = TRUE)
#using parameter paired = TRUE
t.test(nlsaa$ivdur_89, nlsaa$ivdur_93, paired = TRUE)
#check the differenct between male and female
t.test(nlsaa$ivdur_89 ~ nlsaa$sex_89) #note using "~"
#wilcox.test(nlass$vidur_89, nlsaa$ivdru_93)
####Mann-Whitney U test(MWW) ####
#wilcox.test()
wilcox.test(nlsaa$vidur_89, nlsaa$ivdru_93)
####Mann-Whitney U test(MWW) ####
#wilcox.test()
wilcox.test(nlsaa$vidur_89, nlsaa$ivdur_93)
####Mann-Whitney U test(MWW) ####
#wilcox.test()
wilcox.test(nlsaa$ivdur_89, nlsaa$ivdur_93)
anova <- aov(nlsaa$wght_85 ~ factor(nlsaa$agesex85))
summary(anova)
summary(anova) %>% View()
summary(anova)
anova <- aov(nlsaa$wght_85 ~ nlsaa$agesex85)
summary(anova)
View(nlsaa)
View(nlsaa$agesex85)
ggplot(nlsaa, aes(x = factor(agesex85), y = wght_85)) +
geom_boxplot()
##Tukey trst to see if the trend in significant####
TukeyHSD(anova)
anova <- aov(nlsaa$wght_85 ~ factor(nlsaa$agesex85))
##Tukey trst to see if the trend in significant####
TukeyHSD(anova)
##Kruska-wallis test####
#Null hypothesis: all the groups are the same;
#Null hypothesis: and are sample from the same distribution
#extend Mann-Whiteney U test to multiple groups.
#non_parametric
kruskal.test(nlsaa$wght_85 ~ factor(nlsaa$agesex85))
pairwise.wilcox.test(nlsaa$wght_85, factor(nlsaa$agesex85),
p.adjust.method = "BH")
cchisq.test(nlsaa$dep_c_89, nlsaa$aqfall_89)
chisq.test(nlsaa$dep_c_89, nlsaa$aqfall_89)
chisq.test(nlsaa$dep_c_89, nlsaa$qfall_89)
#chechk the distribution using prop.table()
prop.table(table(nlsaa$dep_c_85, nlsaa$qfall_89), 1)
#chechk the distribution using prop.table()
table(nlsaa$dep_c_85, nlsaa$qfall_89)
prop.table(table(nlsaa$dep_c_85, nlsaa$qfall_89), 1)
prop.table(table(nlsaa$dep_c_85, nlsaa$qfall_89))
prop.table(table(nlsaa$dep_c_85, nlsaa$qfall_89), 1)
prop.table(table(nlsaa$dep_c_85, nlsaa$qfall_89), 2)
prop.table(table(nlsaa$dep_c_85, nlsaa$qfall_89), 1)
install.packages("igraph")
library("igraph")
g1 <- graph(edges = c(1,2, 2,3, 3,1), n3, directed = F)
g1 <- graph(edges = c(1,2, 2,3, 3,1), n = 3, directed = F)
g1
plot(g1)
ggplot(g1, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 10, colour = "grey") +
theme_blank()
install.packages("ggnetwork")
install.packages("intergragh")
library("intergrapgh")
library("ggnetwork")
library("intergraph")
install.packages("intergragh")
library("intergraph")
ggplot(g1, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 10, colour = "grey") +
theme_blank()
install.packages("intergraph")
library(intergraph)
ggplot(g1, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 10, colour = "grey") +
theme_blank()
ggplot(g1, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 10, colour = "grey")
install.packages("intergragh")
#using distance matrix to plot####
data(iris)
adjecency.matrix <- distance.matrix<threshold.value
data(iris)
scaled.data <- sacle(iris[, 1:4])
distance.matrix <- as.matrix(dist(scaled.data))
threshold.value <- 0.65
adjecency.matrix <- distance.matrix<threshold.value
adjecency.matrix <- distance.matrix<threshold.value
adjecency.matrix <- distance.matrix<=threshold.value
distance.matrix <- as.matrix(dist(scaled.data))
scaled.data <- sacle(iris[, 1:4])
scaled.data <- scale(iris[, 1:4])
distance.matrix <- as.matrix(dist(scaled.data))
adjecency.matrix <- distance.matrix < threshold.value
g3 <- graph_from_adjacency_matrix(adjacency.matrix, mode = "undirected")
adjacency.matrix <- distance.matrix < threshold.value
rm(adjecency.matrix)
ggplot(g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 5, colour = "grey") +
theme_blank() + labs(caption = "iris dataset")
g2 <- graph_from_adjacency_matrix(adjacency.matrix, mode = "undirected")
ggplot(g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 5, colour = "grey") +
theme_blank() + labs(caption = "iris dataset")
ggplot(g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 4, colour = "grey") +
theme_blank() + labs(caption = "iris dataset")
#change the colour to put information
ggplot(g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "blue") + geom_nodes(size = 4, aes(colour = "species")) +
theme_blank() + labs(caption = "iris dataset")
#change the colour to put information
ggplot(g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = "species")) +
theme_blank() + labs(caption = "iris dataset")
ggplot(g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = "species")) +
theme_blank() + labs(caption = "iris dataset")
#change the colour to put information
g2.info <- set_vertex_attr(g2, name = "species", value = as.character(iris$Species))
ggplot(g2.info, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = "species")) +
theme_blank() + labs(caption = "iris dataset")
#change the colour to put information
g2.info <- set_vertex_attr(g2, name = "species", value = as.character(iris$species))
ggplot(g2.info, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
#change the colour to put information
g2.info <- set_vertex_attr(g2, name = "species", value = as.character(iris$Species))
ggplot(g2.info, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2, layout = "random")
new.g2 <- ggnetwork(g2, layout = "random")
ggplot(new.g2, aes(x = x, y =y , xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "random")
ggplot(new.g2, aes(x = x, y =y , xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "fruchtemanreingold")
new.g2 <- ggnetwork(g2.info, layout = "fruchtermanreingold")
new.g2 <- ggnetwork(g2.info, layout = "fruchtermanreingold")
new.g2 <- network(g2, layout = "kamadakawai")
new.g2 <- network(g2.info, layout = "kamadakawai")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
ggsave.test <- "kamadakawai.png"
ggsave(kamadakawai.png)
ggsave(gg.save)
ggsave(ggsave.test)
ggsave(ggsave.test)
getws()
getwd()
?ggsave
#Dendrogram####
#hclust()
scale.data <- scale(iris[,1:4])
hc <-hclust(dist(scaled.data))
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
new.g2 <- ggnetwork(g2.info, layout = "kamadakawai")
ggplot(new.g2, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_edges(colour = "grey") + geom_nodes(size = 4, aes(colour = species)) +
theme_blank() + labs(caption = "iris dataset")
ggdendrogram(hc, rotata = T) + coord_filp()
scale.data <- scale(iris[,1:4])
hc <-hclust(dist(scaled.data))
ggdendrogram(hc, rotata = T) + coord_filp()
ggdendro(hc, rotata = T) + coord_filp()
ggdendrogram(hc, rotata = T) + coord_filp()
#Dendrogram####
# hclust()
#
library(hclust)
#Dendrogram####
# hclust()
#
install.packages("hclust")
library(hclust)
install.packages("hclust")
install.packages(dendrogram)
install.packages(ggdendrogram)
install.packages("ggdendrogram")
scale.data <- scale(iris[,1:4])
hc <-hclust(dist(scaled.data))
ggdendrogram(hc, rotata = T) + coord_filp()
ggdendrogram(hc, rotate = T) + coord_filp()
install.packages("hclust")
library(hclust)
install.packages("ggdendrogram")
install.packages("ggdendro")
library(hclust)
library(ggdendro)
scale.data <- scale(iris[,1:4])
hc <-hclust(dist(scaled.data))
ggdendrogram(hc, rotate = T) + coord_filp()
ggdendrogram(hc, rotate = T) + coord_flip()
dd.row <- as.dendrogram(hc)
ddata <- dendro_data(dd.row)
ggplot(ddata$segments) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_point(data = ddata$labels,
aes(x = x, y = y,
colour = iris$Species[as.numeric(as.character(label))])) +
theme_dendro() + labs(colour = "Species", caption = "iris dataset")
iris$Species
tes1 <- iris$Species[labels]
tes1 <- iris$Species[labels]
iris$Species[as.numeric(as.character(label))]
ggplot(ddata$segments) +
geom_segment(aes(x = x, y = y, xend = xend, yend = yend)) +
geom_point(data = ddata$labels,
aes(x = x, y = y,
colour = as.numeric(as.character(iris$Species[label]))) +
theme_dendro() + labs(colour = "Species", caption = "iris dataset")
#Sankey diagrams####
mpg %>% group_by(cyl, class) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class)) +
geom_alluvium(aes(fill = class)) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limit = c("Cylinders", "Car class")) +
theme(panel.background = element_blank(), axis.line.y = element_blank(),
axis.text.y = element_blank(), axis.ticks = element_blank()) +
labs(x = "", y = "", fill = "Car class")
#Sankey diagrams####
install.packages("ggalluvial")
library(ggalluvial)
mpg %>% group_by(cyl, class) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class)) +
geom_alluvium(aes(fill = class)) +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limit = c("Cylinders", "Car class")) +
theme(panel.background = element_blank(), axis.line.y = element_blank(),
axis.text.y = element_blank(), axis.ticks = element_blank()) +
labs(x = "", y = "", fill = "Car class")
save.image("~/Desktop/Learning R/Introduction to DS/layout.RData")
##major package####
data("majors")
ggplot(
majors,
aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)
)
majors,
aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")  +
labs(fill = "Curriculum") +
theme(legend.position = "bottom", panel.background = element_blank())
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")
data("majors")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")  +
labs(fill = "Curriculum")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = Curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = Curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")  +
labs(fill = "Curriculum")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")  +
labs(fill = "Curriculum") +
theme(legend.position = "bottom", panel.background = element_blank())
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")  +
labs(fill = "Curriculum") +
theme(legend.position = "bottom")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")  +
labs(fill = "Curriculum")
ggplot(majors,aes(x = semester,
stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")  +
labs(fill = "Curriculum") +
theme(legend.position = "bottom", panel.background = element_blank())
