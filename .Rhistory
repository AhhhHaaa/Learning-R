install.packages("ggalluvial")
install.packages("ggalluvial")
library(ggalluvial)
mpg %>% group_by(cyl, class)  %>%
summarise_coord(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class))+
geom_alluvium(aes(fill = class)) +
geom_stratum()
library(tidyverse)
mpg %>% group_by(cyl, class)  %>%
summarise_coord(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class))+
geom_alluvium(aes(fill = class)) +
geom_stratum()
mpg %>% group_by(cyl, class)  %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class))+
geom_alluvium(aes(fill = class)) +
geom_stratum()
mpg %>% group_by(cyl, class)  %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class))+
geom_alluvium(aes(fill = class))
mpg %>% group_by(cyl, class)  %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class))+
geom_alluvium(aes(fill = class)) +
geom_stratum()
mpg %>% group_by(cyl, class)  %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = cyl, axis2 = class))+
geom_alluvium(aes(fill = class)) +
geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Cylinders", "Car class")) +
theme(panel.background = element_blank(), axis.line.y = element_blank(),
axis.text.y = element_blank(), axis.ticks = element_blank()) +
labs(x = "", y = "", fill = "Car class")
getwd()
save.image("~/Desktop/Learning R/layout and diagrams exercise.RData")
#major####
#major() package includes the ggaluvial
data("majors")
#ggaluvial####
#major() package includes the ggaluvial
data(majors)
ggplot(majors, aes(x = semester, stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum()
ggplot(majors, aes(x = semester, stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey")
ggplot(majors, aes(x = semester, stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey") +
labs(fill = "Curriculm") +
theme(legend.position = "bottom")
ggplot(majors, aes(x = semester, stratum = curriculum, alluvium = student,
fill = curriculum, label = curriculum)) +
geom_stratum() + geom_flow(stat = "alluvium", colour = "darkgrey") +
labs(fill = "Curriculm") +
theme(legend.position = "bottom", panel.background = element_blank())
# exercise 4 --------------------------------------------------------------
Titanic <- as.data.frame(Titanic)
View(Titanic)
ggplot(Titanic, aes(x = Class, stratum = Sex, alluvim = Age,
fill = Sex, label = Sex)) +
geom_stratum()
ggplot(Titanic, aes(x = Freq, stratum = Sex, alluvim = Age,
fill = Freq, label = Freq)) +
geom_stratum()
ggplot(Titanic, aes(x = Sex, stratum = Sex, alluvim = Age,
fill = Sex, label = Sex)) +
geom_stratum()
ggplot(Titanic, aes(x = Freq, stratum = Sex, alluvim = Age,
fill = Sex, label = Sex)) +
geom_stratum()
ggplot(Titanic, aes(x = Class, stratum = Sex, alluvim = Age,
fill = Sex, label = Sex)) +
geom_stratum()
ggplot(Titanic, aes(x = Class,
fill = Sex, label = Sex)) +
geom_stratum()
ggplot(Titanic, aes(x = Class, stratum = Age, alluvim = Age,
fill = Sex, label = Sex)) +
geom_stratum()
ggplot(Titanic, aes(x = Class, stratum = Sex, alluvim = Age,
fill = Sex, label = Sex)) +
geom_stratum()
ggplot(Titanic, aes(x = Class, stratum = Age, alluvim = Sex,
fill = Age, label = Age)) +
geom_stratum()
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Survived, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = class)) + geom_startum()
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Survived, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = class)) + geom_stratum()
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Survived, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = True)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Survived, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Survived, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis3 = Survived, axis2 = Sex, axis1 = Age)) +
geom_alluvium(aes(fill = Class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis3 = Survived, axis2 = Sex, axis1 = Age, axis = Freq)) +
geom_alluvium(aes(fill = Class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis3 = Survived, axis2 = Sex, axis1 = Age)) +
geom_alluvium(aes(fill = Class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis3 = Survived, axis1= Sex, axis3= Age)) +
geom_alluvium(aes(fill = Class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis3 = Survived, axis2= Sex, axis1= Age)) +
geom_alluvium(aes(fill = Class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis3 = Survived, axis1= Sex, axis2= Age)) +
geom_alluvium(aes(fill = Class)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE)
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Class", "Sex", "Age"))
?scale_x_discrete
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Class", "Sex", "Age")) +
theme(panel.backgroud = element_blank())
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Class", "Sex", "Age")) +
theme(panel.background = element_blank())
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Class", "Sex", "Age")) +
theme(panel.background = element_blank(), axis.ticks = element_blank())
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Class", "Sex", "Age")) +
theme(panel.background = element_blank(), axis.ticks = element_blank(),
axis.text.y = element_blank())
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Class", "Sex", "Age")) +
theme(panel.background = element_blank(), axis.ticks = element_blank(),
axis.text.y = element_blank(), axis.line.y = element_blank())
Titanic %>% group_by(Class, Sex, Age, Survived, Freq) %>%
summarise(count = n()) %>%
ggplot(aes(y = count, axis1 = Class, axis2 = Sex, axis3 = Age)) +
geom_alluvium(aes(fill = Survived)) + geom_stratum() +
geom_label(stat = "stratum", label.strata = TRUE) +
scale_x_discrete(limits = c("Class", "Sex", "Age")) +
theme(panel.background = element_blank(), axis.ticks = element_blank(),
axis.text.y = element_blank(), axis.line.y = element_blank()) +
labs(x = "", y = "", fill = "Survived")
library(lubrudata)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Exploring time-series data ----------------------------------------------
#prerequisite packages
library(tidyverse)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ncflight13)
flightEdited <- flight %>%
mutate(date = make_date(year, month, day))
library(nycflight13)
library(nycflights13)
flightEdited <- flight %>%
mutate(date = make_date(year, month, day))
flightEdited <- flights %>%
mutate(date = make_date(year, month, day))
?make_date
flightEdited
class(flightEdited)
classs(flights)
class(flights)
View(flightEdited)
#select the date column
flightEdited %>%
select(year, month, day, date) %>%
head
#select the date column
flightEdited %>%
filter(year, month, day, date) %>%
head
#group the date to count the occurence
daily <- flightEdited %>%
group_by(date) %>%
summarise(n = n())
daily
#plot the frequency of flights
ggplot(daily, aes(date, n)) + geom_line()
#Show the weekdays and month for the date
updateFlightsEdited <- flightEdited %>%
mutate(weekday = wday(date, label = TRUE)) %>%
mutate(month = month(date, label = TRUE))
head(updateFlightsEdited)
View(updateFlightsEdited)
updateFlightsEdited <- flightEdited %>%
mutate(weekday = wday(date, label = TRUE)) %>%
mutate(month = month(date, label = TRUE))
flightEdited %>% select(daily, month)
View(daily)
Jan <- flightEdited %>%
select(date , month) %>% head()
Jan
Jan <- flightEdited %>%
filter(month = "1")
Jan <- flightEdited %>%
filter(month == "1")
Jan
Jan <- flightEdited %>%
filter(month == "1") %>%
group_by(date) %>%
summarise(n = n())
Jan
ggplot(jan, aes(date, n)) + geom_line()
ggplot(Jan, aes(date, n)) + geom_line()
flightEdited %>%
group_by(date) %>%  filter(month == "1")%>%
summarise(n = n())
flightEdited
flightEdited %>%
select(year, month, day, date) %>%
head
# exercise ----------------------------------------------------------------
#
Jan <- flightEdited %>%
filter(month == "1") %>%
group_by(date) %>%
summarise(number.flights = n())
ggplot(Jan, aes(date, number.flights)) + geom_line()
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>%  select(day, month)
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n())
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
order(count)
?order
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
sort(count)
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
sort(count, decreasing = T)
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
order()
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
[order()]
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
filter(count = max(count))
# #1.2 exercise to find the most flights by weekdat and month -------------
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
filter(count == max(count))
# #1.2 exercise to find the most flights by weekday and month -------------
mostFlights<- flightEdited %>% select(day, month, date) %>% group_by(date) %>%
summarise(count = n()) %>%
filter(count == max(count))
# #1.2 exercise to find the most flights by weekday and month -------------
mostFlights<- flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
filter(count == max(count))
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
filter(count == max(count))
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
group_by(day, month) %>%
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
group_by(day, month)
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
group_by(month) %>%
summary(sum = sum(count))
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count))
flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count))
flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count))
test <- flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%ummarise(sum = sum(count))
test <- flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count))
test
test <- flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count)) %>%
filter(max_sum = max(sum))
test <- flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count)) %>%
filter(max_sum == max(sum))
test <- flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count)) %>%
filter(sum == max(sum))
test
test <- flightEdited %>% select(day, month, date) %>%
group_by(month) %>%
summarise(sum = sum(count)) %>%
filter(sum == max(sum))
test <- flightEdited %>% select(day, month, date) %>%
group_by(date, month) %>%
summarise(n = n())
filter(sum == max(sum))
flightEdited %>% select(day, month, date) %>%
group_by(date, month) %>%
summarise(n = n())
filter(sum == max(sum))
flightEdited %>% select(day, month, date) %>%
group_by(date, month) %>%
summarise(sum = n())
filter(sum == max(sum))
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(sum = n())
filter(sum == max(sum))
flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(sum = n())
flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(sum = n())
flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(sum = n()) %>%
group_by(month) %>%
summarise(count = n())
flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(n = n()) %>%
group_by(month) %>%
summarise(sum = sum(n))
test <- flightEdited %>% select(day, month, date) %>%
group_by(date) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count)) %>%
filter(sum == max(sum))
test <- flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count)) %>%
filter(sum == max(sum))
test
# #1.2 exercise to find the most flights by weekday and month -------------
mostFlights <- flightEdited %>% select(day, month, date) %>%
group_by(date,month) %>%
summarise(count = n()) %>%
group_by(month) %>%
summarise(sum = sum(count)) %>%
filter(sum == max(sum))
rm(test)
# 2.Creating a correlation matrix -------------------------------------------
data(mtcars)
str(mtcars)
?str
summary(mtcars)
mcor <- cor(mtcars)
head(mcor)
class(mcor)
#apply cor() can find the relationship between each pair
mcor <- cor(mtcars)
round(mcor, digits = 2)
install.package("corrplot")
install.packages("corrplot")
library(corrplot)
coorplot(mocr)
coorplot(mcor)
corrplot(mcor)
corrplot(mcor)
#ggcoor() from GGally
install.packages("GGally")
library(GGally)
ggcorr(mtcars) +
labs(title = "plot by ggcorr")
ggcorr(mtcars) +
labs(title = "plot by ggcorr in GGally package")
# Create the Heatmap ------------------------------------------------------
nba<-read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
head(nba)
nba$Name
#rename the index for the rows of the data
row.names(nba) <- nba$Name
head(nba)
View(nba)
# Create the Heatmap ------------------------------------------------------
nba<-read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")
View(nba)
View(nba)
#rename the index for the rows of the data
row.names(nba) <- nba$Name
nba[, 2:20]
#remove the first column containing the names
nba <- nba[, 2:20]
View(nba)
#since heatmap requires Matrix
nbaMatrix <- data.matrix(nba)
?heatmap
heatmap(nbaMatrix)
heatmap(nbaMatrix, Rowv = NA)
heatmap(nbaMatrix, Rowv = NA, Colv = NA)
heatmap(nbaMatrix, Rowv = NA, Colv = NA, col = heat.colors(256))
heatmap(nbaMatrix, Rowv = NA, Colv = NA, col = heat.colors(256), scale = "column")
heatmap(nbaMatrix, Rowv = NA, Colv = NA, col = heat.colors(256), scale = "column", margins = c(5,5))
heatmap(nbaMatrix, Rowv = NA, Colv = NA, col = heat.colors(256), scale = "column", margins = c(5,10))
heatmap(nbaMatrix, Rowv = NA, Colv = NA, col = heat.colors(256), scale = "column", margins = c(5,20))
heatmap(nbaMatrix, Rowv = NA, Colv = NA, col = heat.colors(256), scale = "column", margins = c(10,20))
heatmap(nbaMatrix, Rowv = NA, Colv = NA, col = heat.colors(256), scale = "column", margins = c(5,5))
heatmap(nbaMatrix, Rowv = NA, Colv = NA,
col = heat.colors(256), scale = "column", margins = c(5,5))
nba_heatmap<- heatmap(nbaMatrix, Rowv = NA, Colv = NA,
col = heat.colors(256), scale = "column", margins = c(5,5))
